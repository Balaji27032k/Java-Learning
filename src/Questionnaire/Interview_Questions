Methods
is the method a statement or an expression?
A method can be a statement or an expression in some instances.
Any method can be executed as a statement.
A method that returns a value can be used as and expression or as part of any expression.
What are functions and procedure?
The term procedure is somewhat less common,when applied to java methods,but you may still hear "A method with a void
return type is called a procedure.
Some programming languages will call a method that returns a value as a function.
Declaring a Method
There are few declarations that need to occur as we create a method.
This consists of
*Declaring Modifiers - These are keywords in java with special meanings ,we've seen public and static as examples but there are others.
*Declaring the return type.
   - void is a Java Keyword meaning no data is returned from the method.
   - Alternatively ,the return type can be any primitive data type or class.
   - If a return type is defined,the code block must use at least one return statement,returning a value of the declared type
   or comparable type.
   - void is a valid return type and means no data is returned.
   - Any other return type requires a return statment in the method block.
   - If a method declares a return type,then a return type is required at any exit point from the method block.
   - Return Statement for methods that have a return type
       One common practice is to declare a default return value at the start of a method adn only have a single return statement
   from a method returning the variable.
   - Return Statement for methods that have void as return type
        The return statement can return with no value from a method,which is declared with a void return type.
        In this case the return statement is optional ,but it may be used to terminate execution of the method at some
    earlier point than the end of the method block,
        public static void methodDoesSomething(int age)
        {
            if(age>21) { return;}
            //Do some stuff here
        }
*Declaring the method Name - lower camel case is recommended for method names.
*Declaring the method parameters in parenthesis
   - A method is not required to have parameters,so a set of empty parenthesis would be declared in that case.
   - Parameters are declared as a list of comma-separated specifiers,each of which has a parameter type and a parameter
   name(or identifier).
   - Parameter order is important when calling the method.
   - The calling code must pass arguments to the method,with the same or comparable type,and in the same order as the declaration
   - The calling code must pass the same number of arguments as the number of parameters declared.

*Declaring the method block with opening and closing curly braces.This is also called method body.

The Method Signature
A method is uniquely defined in a class by its name,and the number and type of parameters that are declared for it.
This is called method signature.
You can have multiple methods with the same method name,as long as the method signature(meaning the parameters declared)
are different.
This will become important later in this section,when we cover overloaded methods.

Default values for parameters
In many languages,methods can be defined with default values, and you can omit passing values for these when calling the method.
But java doesn't support default values for parameters.
There are work around for this limitation,and we'll be reviewing those at a later date.
But it's important to state again ,in java ,the number of arguments you pass,and their type,must match the parameters in the
method declaration exactly.

Revisiting the main method:
Now,that we're armed with knowledge about methods,we can revisit the main method,and examine it again.
The main method is a special in java,because jvm looks for the method,with this particular signature and uses it as the
entry point for execution of code.
public static void main(String[] args){}
you can actually rename the main -> Main or MAIN but it will loose its special status by doing so
String[] args -> it means it's an array of string
This method allows a user to pass a list of values into the code for the command line or terminal.you can see now why the
name args is appropriate as it represents command line arguments which this method has access to if they are passed in.

Method Overloading
    - Method Overloading occurs when a class has multiple methods with the same name,but the methods are declared with different
    parameters.
    - So,you can execute multiple methods with the same name, but call it with different arguments.
    - Java can resolve which method it needs to execute based on the arguments being passed when the method is invoked.
    - To the calling code it looks like the method takes a variable set of arguments when in truth this isn't the case.
    - Instead, there are a variable number of methods with the same name,but with different sets of parameters,which can be called
    and Java will figure out which one to execute,based on the arguments you pass when invoking the method.
    - A method signature consists of the name of the method and the uniqueness of the declaration of its parameters.
    - In other words,a signature is unique,not just by the method name,but in combination with the number of parameters,
    their types and the order in which they are declared.
    - A method's return type is not part of the signature.
    - A parameter name is also not part of the signature.
    - The type,order and number of parameters in conjunction with the name,make a method signature unique.
    - A unique method signature is the key for the java compiler to determine if a method is overloaded correctly.
    - The name of the parameter is not part of the signature,and therfore it doesn't matter,from java's point of view,
    what we call our parameters.

Valid Overloaded Methods
    public static void doSomething(int parameterA){ // method body }
    public static void doSomething(float parameterA){ // method body }

    public static void doSomething(int parameterA,float  parameterB) { // method body }
    public static void doSomething(float parameterA,int  parameterB) { // method body }

    public static void doSomething(int parameterA,int  parameterB,int parameterC) { // method body }

Invalid Overloaded Methods -> This will cause compile time errors.
Parameter names are not important when determining if a method is overloaded.
    public static void doSomething(int parameterA) { // method body }
    public static void doSomething(int parameterB) { // method body }
Return types are also not important when determining if a method is unique.
    public static int doSomething(int parameterA) { return 0; }





